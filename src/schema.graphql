# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""User auth provider service"""
enum AuthProvider {
  DEFAULT
  DISCORD
  GITHUB
}

input CreateHarvestInput {
  amountHarvested: Int!
  harvestWeight: Float!
  plantUuid: String!
}

input CreatePlantInput {
  description: String!
  image: String
  name: String!
  plantedSeedsOn: DateTime
  requirements: PlantRequirementsCreateInput!
  scientificName: String!
  seedsSproutedOn: DateTime
  type: PlantType!
  variety: String!
}

input CreatePlotInput {
  dirtDepth: Float!
  sizeX: Float!
  sizeY: Float!
  userUuid: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteObjectResponse {
  errors: [ErrorResponse!]
  success: Boolean
}

type Disease {
  createdAt: DateTime
  description: String
  image: String
  plant: Plant
  scientificName: String
  updatedAt: DateTime
  uuid: String
}

input DiseaseCreateInput {
  description: String
  image: String
  scientificName: String
}

type DiseaseResponse {
  disease: Disease
  errors: [ErrorResponse!]
}

type DiseasesEdge {
  cursor: DateTime
  node: Disease
}

input DiseasesInput {
  skip: Int!
  take: Int!
  where: FindDiseaseInput
}

type DiseasesPageInfo {
  endCursor: DateTime
  hasMore: Boolean
  startCursor: DateTime
}

type DiseasesResponse {
  count: Int
  edges: [DiseasesEdge!]
  errors: [ErrorResponse!]
  pageInfo: DiseasesPageInfo
}

type ErrorResponse {
  field: String!
  message: String!
}

input FindDiseaseInput {
  scientificName: String
  uuid: String
}

input FindHarvestInput {
  uuid: String
}

input FindPlantInput {
  image: String
  plantedSeedsOn: DateTime
  plotUuid: String
  scientificName: String
  seedsSproutedOn: DateTime
  type: PlantType
  uuid: String
  variety: String
}

input FindPlantsInput {
  skip: Int!
  take: Int!
  where: FindPlantInput
}

input FindPlotInput {
  dirtDepth: Float
  sizeX: Float
  sizeY: Float
  uuid: String
}

input FindUserInput {
  username: String
  uuid: String
}

type Harvest {
  amountHarvested: Int
  createdAt: DateTime
  harvestWeight: Float
  harvestedOn: DateTime
  plant: Plant
  updatedAt: DateTime
  uuid: String
}

type HarvestResponse {
  errors: [ErrorResponse!]
  harvest: Harvest
}

type HarvestsEdge {
  cursor: DateTime
  node: Harvest
}

type HarvestsPageInfo {
  endCursor: DateTime
  hasMore: Boolean
  startCursor: DateTime
}

type HarvestsResponse {
  count: Int
  edges: [HarvestsEdge!]
  errors: [ErrorResponse!]
  pageInfo: HarvestsPageInfo
}

type Mutation {
  addDiseaseToPlant(disease: FindDiseaseInput!, plant: FindPlantInput!): DiseaseResponse!
  addPlantToPlot(plantUuid: String!, plotUuid: String!): PlotPlantResponse!
  createDisease(input: DiseaseCreateInput!): DiseaseResponse!
  createPlant(input: CreatePlantInput!): PlantResponse!
  createPlantHarvest(input: CreateHarvestInput!): HarvestResponse!
  createPlot(input: CreatePlotInput!): PlotResponse!
  deleteDisease(input: FindDiseaseInput!): DiseaseResponse!
  deleteDiseaseFromPlant(diseaseUuid: String!, plantUuid: String!): DeleteObjectResponse!
  deletePlant(input: FindPlantInput!): DeleteObjectResponse!
  deletePlantHarvest(input: FindHarvestInput!): DeleteObjectResponse!
  deletePlot(uuid: String!): DeleteObjectResponse!
  logout: Boolean!

  """Removes the plant from the current plot if assigned"""
  removePlantFromPlot(plantUuid: String!): DeleteObjectResponse!
}

type Plant {
  createdAt: DateTime
  description: String
  diseases: [Disease!]
  harvests: [Harvest!]
  image: String
  name: String
  plantedSeedsOn: DateTime
  plot: Plot
  requirements: PlantRequirements
  scientificName: String
  seedsSproutedOn: DateTime
  type: PlantType
  updatedAt: DateTime
  uuid: String
  variety: String
}

input PlantDiseasesInput {
  skip: Int!
  take: Int!
  where: FindPlantInput
}

input PlantHarvestsInput {
  skip: Int!
  take: Int!

  """Input to select the plant"""
  where: FindPlantInput
}

type PlantRequirements {
  createdAt: DateTime
  light: String
  soil: String
  temperature: String
  updatedAt: DateTime
  uuid: String
  water: String
}

input PlantRequirementsCreateInput {
  light: String!
  soil: String!
  temperature: String!
  water: String!
}

type PlantResponse {
  errors: [ErrorResponse!]
  plant: Plant
}

"""Used for declaring the type of plant."""
enum PlantType {
  BEAN
  BEET
  BROCCOLI
  CABBAGE
  CARROT
  CELERY
  CORN
  CUCUMBER
  EGGPLANT
  GARLIC
  GINGER
  GREEN_BEAN
  KALE
  LETTUCE
  MUSTARD
  NONE
  ONION
  PEA
  PEPPER
  POTATO
  TOMATO
}

type PlantsEdge {
  cursor: DateTime
  node: Plant
}

type PlantsPageInfo {
  endCursor: DateTime
  hasMore: Boolean
  startCursor: DateTime
}

type PlantsResponse {
  count: Int
  edges: [PlantsEdge!]
  errors: [ErrorResponse!]
  pageInfo: PlantsPageInfo
}

type Plot {
  createdAt: DateTime
  dirtDepth: Float
  plants: [Plant!]
  sizeX: Float
  sizeY: String
  updatedAt: DateTime
  user: User
  uuid: String
}

type PlotPlantResponse {
  errors: [ErrorResponse!]
  plant: Plant
  plot: Plot
}

input PlotPlantsInput {
  plotUuid: String!
  skip: Int!
  take: Int!
  where: FindPlantInput
}

type PlotResponse {
  errors: [ErrorResponse!]
  plot: Plot
}

type PlotsEdge {
  cursor: DateTime
  node: Plot
}

type PlotsPageInfo {
  endCursor: DateTime
  hasMore: Boolean
  startCursor: DateTime
}

type PlotsResponse {
  count: Int
  edges: [PlotsEdge!]
  errors: [ErrorResponse!]
  pageInfo: PlotsPageInfo
}

type Query {
  findDisease(input: FindDiseaseInput!): DiseaseResponse!
  findDiseases(input: DiseasesInput!): DiseasesResponse!
  findHarvest(input: FindHarvestInput!): HarvestResponse!
  findPlants(input: FindPlantsInput!): PlantsResponse!
  findPlot(input: FindPlotInput!): PlotResponse!
  me: UserResponse!
  plant(input: FindPlantInput!): PlantResponse!
  plantDiseases(input: PlantDiseasesInput!): DiseasesResponse!
  plantHarvests(input: PlantHarvestsInput!): HarvestsResponse!
  plotPlants(input: PlotPlantsInput!): PlantsResponse!
  user(input: FindUserInput!): UserResponse!
  userPlots(input: UserPlotsInput!): PlotsResponse!
}

type User {
  authProvider: AuthProvider
  avatar: String
  createdAt: DateTime
  description: String
  oauthId: String
  plots: [Plot!]
  updatedAt: DateTime
  username: String
  uuid: String
}

input UserPlotsInput {
  skip: Int!
  take: Int!
  where: FindUserInput
}

type UserResponse {
  errors: [ErrorResponse!]
  user: User
}